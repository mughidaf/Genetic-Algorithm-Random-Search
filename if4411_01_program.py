# -*- coding: utf-8 -*-
"""IF4411_01_Program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XAGwzfnGjXVhbQDV4EnSxHaWhFPCFB85
"""

import math
import random

ra = 5
rb = -5

def create_pop(ukuran) : 
  populasi = []
  for i in range(ukuran) : 
    kromosom = []
    for j in range(6) : 
      kromosom.append(random.randint(0,9))
    populasi.append(kromosom)

  return populasi

def decode(kromosom,ra,rb) : 
  g = kromosom
  x = rb + (((ra-rb)/((9*(10**(-1))) + (9*(10**(-2))) + (9*(10**(-3))))) * ((g[0]*(10**(-1))) + (g[1]*(10**(-2))) + (g[2]*(10**(-3)))))
  y = rb + (((ra-rb)/((9*(10**(-1))) + (9*(10**(-2))) + (9*(10**(-3))))) * ((g[3]*(10**(-1))) + (g[4]*(10**(-2))) + (g[5]*(10**(-3)))))

  return x,y

def fitness(x,y) : 
  h = ((math.cos(x) + math.sin(y))**2)/(x**2) + (y**2)
  if h==0 : 
    h += 0.0000000000000000000000000000001
  return 1/h

def fitnessPop(populasi) : 
  ar = []
  for i in range(len(populasi)) : 
    x,y = decode(populasi[i],ra,rb)
    ar.append(fitness(x,y))
  return ar

def maxFitness(fitnessPop) :
  max = 0
  for i in range(len(fitnessPop)) : 
    if fitnessPop[i] > max :
      max = i

  return max

def minFitness(fitnessPop) :
  min = 0
  for i in range(len(fitnessPop)) : 
    if fitnessPop[i] < min :
      min = i

  return min

def tournamentSelection(populasi,fitnessPop,comp) : 
  tourney = []
  fitnessTourney = []
  for _ in range(comp) : 
    indeks = random.randint(0,len(populasi)-1)
    tourney.append(populasi[indeks])
    fitnessTourney.append(fitnessPop[indeks])

  return tourney[maxFitness(fitnessTourney)]

def crossover(parent1,parent2,crossProb) :
  prob = random.random()
  child1 = []
  child2 = []
  if prob<=crossProb : 
    i = random.randint(0,5)
    child1[:i] = parent1[:i]
    child1[i:] = parent2[i:]
    child2[:i] = parent2[:i]
    child2[i:] = parent1[i:]
  else : 
    child1 = parent1
    child2 = parent2
  return child1,child2

def mutation(child,mutProb) : 
  prob = random.random()
  indeks = random.randint(0,5)

  if prob<=mutProb : 
    child[indeks] = 9 - child[indeks]
  else :
    child = child
  return child

def matingPool(populasi,crossProb,mutProb,comp) : 
  child = []
  for i in range(len(populasi)//2) : 
    parent1 = tournamentSelection(populasi,fitnessPop(populasi),comp)
    parent2 = tournamentSelection(populasi,fitnessPop(populasi),comp)
    child1, child2 = crossover(parent1,parent2,crossProb)
    child1 = mutation(child1,mutProb)
    child2 = mutation(child2,mutProb)
    child.append(child1)
    child.append(child2)

  return child

def steadyState(populasi,child) : 
  generasi = populasi
  for i in range(len(populasi)//2) : 
    indeks = minFitness(fitnessPop(populasi))
    generasi[indeks] = child[i]
  
  return generasi

ukuran = int(input("Masukkan ukuran populasi yang diinginkan : "))
generasi = int(input("Berapa generasi yang diinginkan ? "))
crossProb = 1
mutProb = 0.8
comp = int(input("Masukkan jumlah calon orang tua dari seleksi turnamen (harus lebih kecil dari populasi) : "))

populasi = create_pop(ukuran)
fitPop = fitnessPop(populasi)
print("Generasi 1 : ")
for i in range(ukuran) : 
  print("kromosom ",i+1," : ",populasi[i],"dekode : ",decode(populasi[i],ra,rb)," Fitness : ",fitPop[i])
print("========================================================================================================================")

for j in range(generasi-1) : 
  child = matingPool(populasi,crossProb,mutProb,comp)
  populasi = steadyState(populasi,child)
  fitPop = fitnessPop(populasi)
  print("Generasi ",j+2," : ")
  for i in range(ukuran) : 
    print("kromosom ",i+1," : ",populasi[i],"dekode : ",decode(populasi[i],ra,rb)," Fitness : ",fitPop[i])
  print("========================================================================================================================")

x,y = decode(populasi[maxFitness(fitPop)],ra,rb)
print("kromosom terbaik ialah : ",populasi[maxFitness(fitPop)],"dengan decode X = ",x," dan Y = ",y)